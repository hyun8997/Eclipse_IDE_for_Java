# 단축키
ctrl + s                  Save
ctrl + F11                Run 
ctrl + /                  한 줄 주석
ctrl + space              완성 기능
                          sysout 치고 ctrl + space => System.out.println(); 완성해줌.
tab                       깜빡이는 선이 현재 위치고 녹색선이 이클립스가 예측한 다음 위치, tab키로 녹색선으로 이동 가능
ctrl + alt + 아래방향키    선택된 행 복사&붙여넣기
Ctrl + shift + O          import 단축키






-------------------------------------------------------------------------------
# 기억할 것
메인 문 // 메인 시작 // 메인 끝 적어두는게 권장 
class는 java의 최소단위이다.
자바는 int 이하의 연산에서는 모두 int로 자동변환하여 계산
평균 구할 때 int형 나누기 int형은 결과가 int형이다. 따라서 반드시 캐스팅(형식변환) 필요 //double avg = score / (double)3; //double avg = score / 3.0;
Row 먼저 찾고 Column

primitive type 변수 선언 : 메모리영역에 공간을 만들고 대입(할당)
reference type 변수 선언 : stack 영역에 변수를 할당하고 heap 영역의 메모리 주소를 참조
참조(할당) 되어있는 상태 : 인스턴스화 되어있다, 주소값을 부여받았다.
메소드 호출: call by naem, value, reference

> method overloading (다중 정의)
 : 메소드 이름은 하나이지만 다양한 상황에서 동작하게 하는 기능
 : 메소드 이름은 같게 하고 매개변수 타입, 이름, 순서, 개수를 다르게 하면 됨
 : 만드는 사람(개발자)는 불편하나 사용자는 편해짐
 
String 비교는 함수로, id.equals("java")   id.equals(this.id)

생성자 : 맴버 변수 초기화를 목적으로 하는 아주 특별한 메소드
this : 자기 자신을 가리키는 참조변수
내 클래스를 사용할 사람들(개발자)을 위해서 다양한 생성자를 갖는 클래스로 작성하는 것을 권장
this();				// 기본 생성자를 실행
상속
다중상속X
public class 자식클래스 extends 부모클래스{}
@Override		// 부모것을 받아서 내 방식대로 바꿔쓰도록 ==> 체크하는 용도임, 자동으로 허용되있긴 함
super : 부모를 가리키는 참조변수(키워드)
오버로드 생성자를 이미 만들면 JVM이 기본 생성자를 만들어주지 않는다.
super() : 부모 생성자 호출
캡슐화
매개변수를 Teran(부모 클래스)로 지정하면 Teran을 부모로 갖는 모든 자식 클래스를 공격할 수 있다.

> 추상 클래스
 형태 : abstract 클래스명
 : new 키워드를 통해 객체 생성을 할 수 없는 클래스
 : 객체화, 인스턴스화 할 수 없는 클래스
참조변수의 원객체 여부를 확인하고 싶을 때 : instanceof (t/f)

>
Interface : 서로 관계가 없는 객체들을 상호작용 하기 위해 사용하는 장치나 시스템
            인터페이스는 언제나 추상객체이므로 abstract 생략 가능
            모든 메소드가 추상메소드, 모든 맴버변수는 상수(바꾸는것 불가능)
            추상클래스보다 더 추상적 객체
 형태 : implements 인터페이스명 (다중 상속은 아니지만 다중 상속처럼 사용가능함)
        자바는 단일 상속만을 채택하고 있으므로 다중 상속의 장점을 취하고 싶을 때 사용 (implements)







-------------------------------------------------------------------------------
# d20201130
*Identifier               식별자 설명(primitive type, reference type 설명)
VarEx01.java              정수형 변수 선언, 초기화, 출력(primitive type)
VarEx02.java              실수형 변수 선언과 동시에 초기화, 강제 형변환
VarEx03.java              문자형, ASCII, unicode
VarEx04.java              논리형
# d20201202
*Scanner                  스캔 동작
*Loop                     반복문 종류와 특징
SwitchEx04.java           Switch문 예시
IfEx05.java               If문 예시
ForBasic.java             For문
ForEx01.java              
ForEx02.java              다중 반복문
ForEx03.java              For문, 개행 없는 출력
ForEx04.java              For문 예시:구구단
ForEx05.java              For문 예시:덧셈의 조합
WhileBasic.java           While문, do~while문
# d20201203
*Array                    배열 설명(reference type)
WhileEx01.java            While문
WhileEx02.java            While문
BreakEx.java              Break, Continue 루프 제어
ArrayEx01.java            배열 선언, 출력, 배열 크기
ArrayEx02.java            배열 초기화
ArrayEx03.java            배열 공통 연산
ArrayEx04.java            문자형, 문자열, String
ArrayLotto.java           Math.random(): 0.0~1.0, 로또 셔플
# d20201204
*OOP                      객체 지향 프로그램, Class, Method
ArrayEx05.java            2차 배열, 2차 배열의 스택-힙 영역 주소와 길이
Car.java                  클래스 생성, 호출
MethodBasic.java          메소드 선언, 인스턴스화, 호출
SungJuk.java              메소드 call by name 예시
SungJuk2.java             메소드 call by value 예시
MethodEx01.java           메소드 연습 파일
MethodEx02.java
MethodEx03.java
MethodEx04.java           메소드 이름 같아도 입력 parameter를 다르게하면 오류 없이 잘됨
                          => method overloading, 다중 
MultiParam.java           로그인 메소드, String 비교는 함수로 함 str1.equals(str2)
# d20201207
MethodReturn.java         값을 return하는 method
MethodEx05.java           
MethodEx06.java           소수인지 boolean return
Foo.java                  args[] 사용, 더미
Foo.class                 args[] 사용, 더미
# d20201208
명명법                     
Computer.java             맴버 변수(필드), 생성자, 맴버 메소드
GuGuDan.java              OOP 형태로 구구단 출력: 필드, 생성자, 맴버 메소드 구현 연습
Human.java                Society에서 사용할 클래스
Society.java              Human 호출, OOP 형태는 있으나 보안등 완성된 OOP가 아님을 확인
# d20201209
                          상속 -> 키워드는 extends => 자식은 부모의 확장, 물려받고 하고 싶은거 더 함
                          물려받고 내 방식대로 고쳐서 사용가능 -> method overriding
Parent.java               부모 클래스
Child.java                자식 클래스, public class Child extends Parent, @Override
ExtendsMain.java          부모, 자식 클래스 테스트 파일
CareerMan.java            직업, 직위 담긴 클래스
Man.java                  이름 정보 클래스
ExtendsMain2.java         CareerMan, Man 테스트
Animal.java               이름, 먹는것 정보 있음
Cat.java                  고양이 걷는 정보, 부모는 Animal.java
Dog.java                  개 걷는 정보, 부모는 Animal.java
ExtendsMain3.java         고양이, 개, Animal을 부모로 한 공통-차별 데이터 구성
마린.java                 테스트용 마린 파일
메딕.java                 테스트용 메딕 파일
TestMain.java             마린객체 테스트용
TestMain2.java            메딕, 마린, 슈퍼마린(마린에서 생성자 오버로딩) 테스트용
Teran.java                테란 종족값
Marine.java               마린, 테란에 상속
Medic.java                메딕, 테란에 상속
TestMain3.java            위의 3 파일 테스트
# d20201210
포유류.java                추상 클래스
고래.java                  포유류 밑 고래
토끼.java                  포유류 밑 토끼
AbstractMain.java         포유류 추상 테스트 파일
ReferenceArr.java         배열로 선언, 확인
AbstractEx.java           abstract class 테스트
Flyable.java              인터페이스 설명, 자바는 단일 상속만을 채택하고 있으므로 다중 상속의 장점을 취하고 싶을 때 사용 (implements)
Horse.java                extends 포유류, implements Flyable(다중 상속은 아니지만 다중 상속처럼 사용가능함)
InterfaceMain.java        Horse와 Flyable 인터페이스를 테스트























































































































































































