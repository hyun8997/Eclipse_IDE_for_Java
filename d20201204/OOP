java => 객체 지향 프로그래밍 언어

객체(object) 
			사물, 대상 => 특징, 행동
			실체화, 정의해서 대상화, 사용
			OOP라고 함

+ OOP( Object Oriented Programming)
 - 객체 지향 프로그램
 - 사물(대상)이 가진 특성이나 행동들을 그대로 실체화하고자 하는데 그 목적이 있음

ex) 자동차 													=> 1. 생성자
		바퀴
		엔진
		제조사		=> 자동차의 특성이나 성질	=> 2. 맴버 변수
		차량명
		--------																			=> 설계, 이런 다양한 정보를 담아 놓을 그릇이 필요 = 클래스
		전진
		정지			=> 자동차의 행위(동작)		=> 3. 맴버 메소드
		후진

Car car; // 클래스 선언		=> 스택 영역에 car 라는 힙영역 주소를 가진 참조 변수 생기고
											=> 힙 영역의 지정 메모리부터 클래스의 맴버 변수ㅡ메소드가 생성됨		배열이랑 비슷함
car = new Car(); // 인스턴스화(new) => 자료형들을 모두 초기화(ref로), 메모리에 올리는거

+ Class(클래스)
 : 하나의 클래스는 메모리 할당 시 다양한 값을 가질 수 있고 객체라고 부른다
 : 하나의 객체는 독립적이다.

+ Method(메소드)
 : 메소드(함수)는 맴버 변수(필드, 데이터)를 조작하고 처리하는 역할을 담당
 : 2번 이상 호출되는 로직이나 향후 호출될 가능성이 있는 로직은 메소드의 대상이 된다.
 : 종류 - void형, return형.
		메소드 오버리딩/오버라이팅

메소드는 인스턴스화가 되어야 구현됨, 그전엔 정보만 있는 상태
인스턴스화 장소의 키워드는 static(?)  main

> 메소드 호출
1) call by name 
	몇번을 실행하든 결과 고정되 있을 수 있음
2) call by value				// 값을 복사해서 사용하는 것이므로 원본 데이터를 수정 X
	데이터(parameter)를 넣어서 호출
	parameter 쌍방간에 데이터 타입과 개수가 일치해야 함
3) call by reference		// 참조값(주소값)을 가져다가 사용하는 것이므로 원본 데이터를 수정 가능
	객체 자체를 넣어서 보내주겠다.

> method overloading (다중 정의)
 : 메소드 이름은 하나이지만 다양한 상황에서 동작하게 하는 기능
 : 메소드 이름은 같게 하고 매개변수 타입, 이름, 순서, 개수를 다르게 하면 됨
 : 만드는 사람(개발자)는 불편하나 사용자는 편해짐




